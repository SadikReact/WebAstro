{"version":3,"sources":["pages/shop/ShopGridFilter.js"],"names":["connect","state","products","productData","_ref","location","_useState","useState","_useState2","_slicedToArray","layout","setLayout","_useState3","_useState4","sortType","setSortType","_useState5","_useState6","sortValue","setSortValue","_useState7","_useState8","filterSortType","setFilterSortType","_useState9","_useState10","filterSortValue","setFilterSortValue","_useState11","_useState12","offset","setOffset","_useState13","_useState14","currentPage","setCurrentPage","_useState15","_useState16","currentData","setCurrentData","_useState17","_useState18","sortedProducts","setSortedProducts","pathname","useEffect","getSortedProducts","filterSortedProducts","slice","React","createElement","Fragment","MetaTags","name","content","BreadcrumbsItem","to","process","LayoutOne","headerTop","Breadcrumb","className","ShopTopbarFilter","getLayout","getFilterSortParams","productCount","length","sortedProductCount","getSortParams","ShopProducts","Paginator","totalRecords","pageLimit","pageNeighbours","pageContainerClass","pagePrevText","pageNextText"],"mappings":"iPA0GeA,6BANS,SAAAC,GACpB,MAAM,CACFC,SAAUD,EAAME,YAAYD,YAIrBF,EA9FQ,SAAHI,GAA8B,IAAzBC,EAAQD,EAARC,SAAUH,EAAQE,EAARF,SAC/BI,EAA4BC,mBAAS,qBAAoBC,EAAAC,YAAAH,EAAA,GAAlDI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,EAAgCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,EAAkCT,mBAAS,IAAGU,EAAAR,YAAAO,EAAA,GAAvCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,EAA4Cb,mBAAS,IAAGc,EAAAZ,YAAAW,EAAA,GAAjDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,EAA8CjB,mBAAS,IAAGkB,EAAAhB,YAAAe,EAAA,GAAnDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,EAA4BrB,mBAAS,GAAEsB,EAAApB,YAAAmB,EAAA,GAAhCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,EAAsCzB,mBAAS,GAAE0B,EAAAxB,YAAAuB,EAAA,GAA1CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,EAAsC7B,mBAAS,IAAG8B,EAAA5B,YAAA2B,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAClCG,EAA4CjC,mBAAS,IAAGkC,EAAAhC,YAAA+B,EAAA,GAAjDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GAGjCG,EAAYvC,EAAZuC,SAwBP,OARAC,qBAAU,WACN,IAAIH,EAAiBI,YAAkB5C,EAAUY,EAAUI,GACrD6B,EAAuBD,YAAkBJ,EAAgBpB,EAAgBI,GAE/EiB,EADAD,EAAiBK,GAEjBR,EAAeG,EAAeM,MAAMlB,EAAQA,EAtB9B,OAuBf,CAACA,EAAQ5B,EAAUY,EAAUI,EAAWI,EAAgBI,IAGvDuB,IAAAC,cAACC,WAAQ,KACLF,IAAAC,cAACE,IAAQ,KACLH,IAAAC,cAAA,aAAO,qBACPD,IAAAC,cAAA,QAAMG,KAAK,cAAcC,QAAQ,6DAGrCL,IAAAC,cAACK,kBAAe,CAACC,GAA6B,KAAK,QACnDP,IAAAC,cAACK,kBAAe,CAACC,GAAIC,GAAyBb,GAAU,QAExDK,IAAAC,cAACQ,IAAS,CAACC,UAAU,WAEjBV,IAAAC,cAACU,IAAU,MAEXX,IAAAC,cAAA,OAAKW,UAAU,0BACXZ,IAAAC,cAAA,OAAKW,UAAU,aACXZ,IAAAC,cAAA,OAAKW,UAAU,OACXZ,IAAAC,cAAA,OAAKW,UAAU,aAEXZ,IAAAC,cAACY,IAAgB,CAACC,UAzC5B,SAACrD,GACfC,EAAUD,IAwCsDsD,oBAhCxC,SAAClD,EAAUI,GACnCK,EAAkBT,GAClBa,EAAmBT,IA8BuF+C,aAAc/D,EAASgE,OAAQC,mBAAoB7B,EAAY4B,OAAQhE,SAAUA,EAAUkE,cArCnL,SAACtD,EAAUI,GAC7BH,EAAYD,GACZK,EAAaD,MAsCW+B,IAAAC,cAACmB,IAAY,CAAC3D,OAAQA,EAAQR,SAAUoC,IAGxCW,IAAAC,cAAA,OAAKW,UAAU,0CACXZ,IAAAC,cAACoB,IAAS,CACNC,aAAc7B,EAAewB,OAC7BM,UArDlB,GAsDkBC,eAAgB,EAChB1C,UAAWA,EACXG,YAAaA,EACbC,eAAgBA,EAChBuC,mBAAmB,YACnBC,aAAa,OACbC,aAAa","file":"static/js/195.fc1b4363.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useState, useEffect } from 'react';\r\nimport MetaTags from 'react-meta-tags';\r\nimport Paginator from 'react-hooks-paginator';\r\nimport { BreadcrumbsItem } from 'react-breadcrumbs-dynamic';\r\nimport { connect } from 'react-redux';\r\nimport { getSortedProducts } from '../../helpers/product';\r\nimport LayoutOne from '../../layouts/LayoutOne';\r\nimport Breadcrumb from '../../wrappers/breadcrumb/Breadcrumb';\r\nimport ShopTopbarFilter from '../../wrappers/product/ShopTopbarFilter';\r\nimport ShopProducts from '../../wrappers/product/ShopProducts';\r\n\r\nconst ShopGridFilter = ({location, products}) => {\r\n    const [layout, setLayout] = useState('grid three-column');\r\n    const [sortType, setSortType] = useState('');\r\n    const [sortValue, setSortValue] = useState('');\r\n    const [filterSortType, setFilterSortType] = useState('');\r\n    const [filterSortValue, setFilterSortValue] = useState('');\r\n    const [offset, setOffset] = useState(0);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [currentData, setCurrentData] = useState([]);\r\n    const [sortedProducts, setSortedProducts] = useState([]);\r\n\r\n    const pageLimit = 15;\r\n    const {pathname} = location;\r\n\r\n    const getLayout = (layout) => {\r\n        setLayout(layout)\r\n    }\r\n\r\n    const getSortParams = (sortType, sortValue) => {\r\n        setSortType(sortType);\r\n        setSortValue(sortValue);\r\n    }\r\n\r\n    const getFilterSortParams = (sortType, sortValue) => {\r\n        setFilterSortType(sortType);\r\n        setFilterSortValue(sortValue);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let sortedProducts = getSortedProducts(products, sortType, sortValue);\r\n        const filterSortedProducts = getSortedProducts(sortedProducts, filterSortType, filterSortValue);\r\n        sortedProducts = filterSortedProducts;\r\n        setSortedProducts(sortedProducts);\r\n        setCurrentData(sortedProducts.slice(offset, offset + pageLimit));\r\n    }, [offset, products, sortType, sortValue, filterSortType, filterSortValue ]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaTags>\r\n                <title>Flone | Shop Page</title>\r\n                <meta name=\"description\" content=\"Shop page of flone react minimalist eCommerce template.\" />\r\n            </MetaTags>\r\n\r\n            <BreadcrumbsItem to={process.env.PUBLIC_URL + '/'}>Home</BreadcrumbsItem>\r\n            <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>Shop</BreadcrumbsItem>\r\n\r\n            <LayoutOne headerTop=\"visible\">\r\n                {/* breadcrumb */}\r\n                <Breadcrumb />\r\n\r\n                <div className=\"shop-area pt-95 pb-100\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-12\">\r\n                                {/* shop topbar filter */}\r\n                                <ShopTopbarFilter getLayout={getLayout} getFilterSortParams={getFilterSortParams} productCount={products.length} sortedProductCount={currentData.length} products={products} getSortParams={getSortParams}/>\r\n\r\n                                {/* shop page content default */}\r\n                                <ShopProducts layout={layout} products={currentData} />\r\n\r\n                                {/* shop product pagination */}\r\n                                <div className=\"pro-pagination-style text-center mt-30\">\r\n                                    <Paginator\r\n                                        totalRecords={sortedProducts.length}\r\n                                        pageLimit={pageLimit}\r\n                                        pageNeighbours={2}\r\n                                        setOffset={setOffset}\r\n                                        currentPage={currentPage}\r\n                                        setCurrentPage={setCurrentPage}\r\n                                        pageContainerClass=\"mb-0 mt-0\"\r\n                                        pagePrevText=\"«\"\r\n                                        pageNextText=\"»\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </LayoutOne>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nShopGridFilter.propTypes = {\r\n  location: PropTypes.object,\r\n  products: PropTypes.array\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        products: state.productData.products\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ShopGridFilter);"],"sourceRoot":""}